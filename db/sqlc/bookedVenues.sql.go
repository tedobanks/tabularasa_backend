// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookedVenues.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBookedVenue = `-- name: CreateBookedVenue :one
INSERT INTO "bookedVenues" (
  type,
  venue_id,
  booked_for,
  booked_by
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, type, venue_id, booked_for, booked_by, created_at
`

type CreateBookedVenueParams struct {
	Type      sql.NullString `json:"type"`
	VenueID   uuid.NullUUID  `json:"venue_id"`
	BookedFor sql.NullTime   `json:"booked_for"`
	BookedBy  uuid.NullUUID  `json:"booked_by"`
}

func (q *Queries) CreateBookedVenue(ctx context.Context, arg CreateBookedVenueParams) (BookedVenues, error) {
	row := q.db.QueryRowContext(ctx, createBookedVenue,
		arg.Type,
		arg.VenueID,
		arg.BookedFor,
		arg.BookedBy,
	)
	var i BookedVenues
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.VenueID,
		&i.BookedFor,
		&i.BookedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookedVenue = `-- name: DeleteBookedVenue :exec
DELETE FROM "bookedVenues"
WHERE id = $1
`

func (q *Queries) DeleteBookedVenue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBookedVenue, id)
	return err
}

const getBookedVenue = `-- name: GetBookedVenue :one
SELECT id, type, venue_id, booked_for, booked_by, created_at FROM "bookedVenues"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookedVenue(ctx context.Context, id uuid.UUID) (BookedVenues, error) {
	row := q.db.QueryRowContext(ctx, getBookedVenue, id)
	var i BookedVenues
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.VenueID,
		&i.BookedFor,
		&i.BookedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listBookedVenuesByUser = `-- name: ListBookedVenuesByUser :many
SELECT id, type, venue_id, booked_for, booked_by, created_at FROM "bookedVenues"
WHERE booked_by = $1
ORDER BY booked_for
`

func (q *Queries) ListBookedVenuesByUser(ctx context.Context, bookedBy uuid.NullUUID) ([]BookedVenues, error) {
	rows, err := q.db.QueryContext(ctx, listBookedVenuesByUser, bookedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookedVenues
	for rows.Next() {
		var i BookedVenues
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.VenueID,
			&i.BookedFor,
			&i.BookedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookedVenuesByVenue = `-- name: ListBookedVenuesByVenue :many
SELECT id, type, venue_id, booked_for, booked_by, created_at FROM "bookedVenues"
WHERE venue_id = $1
ORDER BY booked_for
`

func (q *Queries) ListBookedVenuesByVenue(ctx context.Context, venueID uuid.NullUUID) ([]BookedVenues, error) {
	rows, err := q.db.QueryContext(ctx, listBookedVenuesByVenue, venueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookedVenues
	for rows.Next() {
		var i BookedVenues
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.VenueID,
			&i.BookedFor,
			&i.BookedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookedVenue = `-- name: UpdateBookedVenue :one
UPDATE "bookedVenues"
  set type = $2,
  venue_id = $3,
  booked_for = $4,
  booked_by = $5
WHERE id = $1
RETURNING id, type, venue_id, booked_for, booked_by, created_at
`

type UpdateBookedVenueParams struct {
	ID        uuid.UUID      `json:"id"`
	Type      sql.NullString `json:"type"`
	VenueID   uuid.NullUUID  `json:"venue_id"`
	BookedFor sql.NullTime   `json:"booked_for"`
	BookedBy  uuid.NullUUID  `json:"booked_by"`
}

func (q *Queries) UpdateBookedVenue(ctx context.Context, arg UpdateBookedVenueParams) (BookedVenues, error) {
	row := q.db.QueryRowContext(ctx, updateBookedVenue,
		arg.ID,
		arg.Type,
		arg.VenueID,
		arg.BookedFor,
		arg.BookedBy,
	)
	var i BookedVenues
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.VenueID,
		&i.BookedFor,
		&i.BookedBy,
		&i.CreatedAt,
	)
	return i, err
}
