// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: purchases.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPurchase = `-- name: CreatePurchase :one
INSERT INTO "purchases" (
  event_id,
  venue_id,
  service_id,
  purchased_by
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, event_id, venue_id, service_id, purchased_by, created_at
`

type CreatePurchaseParams struct {
	EventID     uuid.NullUUID `json:"event_id"`
	VenueID     uuid.NullUUID `json:"venue_id"`
	ServiceID   uuid.NullUUID `json:"service_id"`
	PurchasedBy uuid.NullUUID `json:"purchased_by"`
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) (Purchases, error) {
	row := q.db.QueryRowContext(ctx, createPurchase,
		arg.EventID,
		arg.VenueID,
		arg.ServiceID,
		arg.PurchasedBy,
	)
	var i Purchases
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.VenueID,
		&i.ServiceID,
		&i.PurchasedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deletePurchase = `-- name: DeletePurchase :exec
DELETE FROM purchases
WHERE id = $1
`

func (q *Queries) DeletePurchase(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePurchase, id)
	return err
}

const getPurchase = `-- name: GetPurchase :one
SELECT id, event_id, venue_id, service_id, purchased_by, created_at FROM purchases
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPurchase(ctx context.Context, id uuid.UUID) (Purchases, error) {
	row := q.db.QueryRowContext(ctx, getPurchase, id)
	var i Purchases
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.VenueID,
		&i.ServiceID,
		&i.PurchasedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listPurchasesByEvent = `-- name: ListPurchasesByEvent :many
SELECT id, event_id, venue_id, service_id, purchased_by, created_at FROM purchases
WHERE event_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListPurchasesByEvent(ctx context.Context, eventID uuid.NullUUID) ([]Purchases, error) {
	rows, err := q.db.QueryContext(ctx, listPurchasesByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purchases
	for rows.Next() {
		var i Purchases
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.VenueID,
			&i.ServiceID,
			&i.PurchasedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPurchasesByService = `-- name: ListPurchasesByService :many
SELECT id, event_id, venue_id, service_id, purchased_by, created_at FROM purchases
WHERE service_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListPurchasesByService(ctx context.Context, serviceID uuid.NullUUID) ([]Purchases, error) {
	rows, err := q.db.QueryContext(ctx, listPurchasesByService, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purchases
	for rows.Next() {
		var i Purchases
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.VenueID,
			&i.ServiceID,
			&i.PurchasedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPurchasesByUser = `-- name: ListPurchasesByUser :many
SELECT id, event_id, venue_id, service_id, purchased_by, created_at FROM purchases
WHERE purchased_by = $1
ORDER BY created_at DESC
`

func (q *Queries) ListPurchasesByUser(ctx context.Context, purchasedBy uuid.NullUUID) ([]Purchases, error) {
	rows, err := q.db.QueryContext(ctx, listPurchasesByUser, purchasedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purchases
	for rows.Next() {
		var i Purchases
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.VenueID,
			&i.ServiceID,
			&i.PurchasedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPurchasesByVenue = `-- name: ListPurchasesByVenue :many
SELECT id, event_id, venue_id, service_id, purchased_by, created_at FROM purchases
WHERE venue_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListPurchasesByVenue(ctx context.Context, venueID uuid.NullUUID) ([]Purchases, error) {
	rows, err := q.db.QueryContext(ctx, listPurchasesByVenue, venueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Purchases
	for rows.Next() {
		var i Purchases
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.VenueID,
			&i.ServiceID,
			&i.PurchasedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
