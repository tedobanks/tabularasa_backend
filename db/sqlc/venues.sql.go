// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: venues.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createVenue = `-- name: CreateVenue :one
INSERT INTO "venues" (
  image_links,
  name,
  type,
  description,
  location,
  dimension,
  capacity,
  facilities,
  has_accomodation,
  room_type,
  no_of_rooms,
  sleeps,
  bed_type,
  rent,
  owned_by,
  is_available,
  opens_at,
  closes_at,
  rental_days,
  booking_price
) VALUES (
  $1::varchar[], $2, $3, $4, $5, $6, $7, $8::varchar[], $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20
)
RETURNING id, image_links, name, type, description, location, dimension, capacity, facilities, has_accomodation, room_type, no_of_rooms, sleeps, bed_type, rent, owned_by, is_available, opens_at, closes_at, rental_days, booking_price, created_at
`

type CreateVenueParams struct {
	Column1         []string       `json:"column_1"`
	Name            string         `json:"name"`
	Type            sql.NullString `json:"type"`
	Description     sql.NullString `json:"description"`
	Location        string         `json:"location"`
	Dimension       sql.NullString `json:"dimension"`
	Capacity        sql.NullInt32  `json:"capacity"`
	Column8         []string       `json:"column_8"`
	HasAccomodation sql.NullBool   `json:"has_accomodation"`
	RoomType        sql.NullString `json:"room_type"`
	NoOfRooms       sql.NullInt32  `json:"no_of_rooms"`
	Sleeps          sql.NullString `json:"sleeps"`
	BedType         sql.NullString `json:"bed_type"`
	Rent            sql.NullInt32  `json:"rent"`
	OwnedBy         uuid.NullUUID  `json:"owned_by"`
	IsAvailable     sql.NullBool   `json:"is_available"`
	OpensAt         sql.NullTime   `json:"opens_at"`
	ClosesAt        sql.NullTime   `json:"closes_at"`
	RentalDays      sql.NullString `json:"rental_days"`
	BookingPrice    sql.NullInt32  `json:"booking_price"`
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams) (Venues, error) {
	row := q.db.QueryRowContext(ctx, createVenue,
		pq.Array(arg.Column1),
		arg.Name,
		arg.Type,
		arg.Description,
		arg.Location,
		arg.Dimension,
		arg.Capacity,
		pq.Array(arg.Column8),
		arg.HasAccomodation,
		arg.RoomType,
		arg.NoOfRooms,
		arg.Sleeps,
		arg.BedType,
		arg.Rent,
		arg.OwnedBy,
		arg.IsAvailable,
		arg.OpensAt,
		arg.ClosesAt,
		arg.RentalDays,
		arg.BookingPrice,
	)
	var i Venues
	err := row.Scan(
		&i.ID,
		pq.Array(&i.ImageLinks),
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Location,
		&i.Dimension,
		&i.Capacity,
		pq.Array(&i.Facilities),
		&i.HasAccomodation,
		&i.RoomType,
		&i.NoOfRooms,
		&i.Sleeps,
		&i.BedType,
		&i.Rent,
		&i.OwnedBy,
		&i.IsAvailable,
		&i.OpensAt,
		&i.ClosesAt,
		&i.RentalDays,
		&i.BookingPrice,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVenue = `-- name: DeleteVenue :exec
DELETE FROM venues
WHERE id = $1
`

func (q *Queries) DeleteVenue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVenue, id)
	return err
}

const getVenueByName = `-- name: GetVenueByName :one
SELECT id, image_links, name, type, description, location, dimension, capacity, facilities, has_accomodation, room_type, no_of_rooms, sleeps, bed_type, rent, owned_by, is_available, opens_at, closes_at, rental_days, booking_price, created_at FROM venues
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetVenueByName(ctx context.Context, name string) (Venues, error) {
	row := q.db.QueryRowContext(ctx, getVenueByName, name)
	var i Venues
	err := row.Scan(
		&i.ID,
		pq.Array(&i.ImageLinks),
		&i.Name,
		&i.Type,
		&i.Description,
		&i.Location,
		&i.Dimension,
		&i.Capacity,
		pq.Array(&i.Facilities),
		&i.HasAccomodation,
		&i.RoomType,
		&i.NoOfRooms,
		&i.Sleeps,
		&i.BedType,
		&i.Rent,
		&i.OwnedBy,
		&i.IsAvailable,
		&i.OpensAt,
		&i.ClosesAt,
		&i.RentalDays,
		&i.BookingPrice,
		&i.CreatedAt,
	)
	return i, err
}

const listvenues = `-- name: Listvenues :many
SELECT id, image_links, name, type, description, location, dimension, capacity, facilities, has_accomodation, room_type, no_of_rooms, sleeps, bed_type, rent, owned_by, is_available, opens_at, closes_at, rental_days, booking_price, created_at FROM venues
ORDER BY name
`

func (q *Queries) Listvenues(ctx context.Context) ([]Venues, error) {
	rows, err := q.db.QueryContext(ctx, listvenues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Venues
	for rows.Next() {
		var i Venues
		if err := rows.Scan(
			&i.ID,
			pq.Array(&i.ImageLinks),
			&i.Name,
			&i.Type,
			&i.Description,
			&i.Location,
			&i.Dimension,
			&i.Capacity,
			pq.Array(&i.Facilities),
			&i.HasAccomodation,
			&i.RoomType,
			&i.NoOfRooms,
			&i.Sleeps,
			&i.BedType,
			&i.Rent,
			&i.OwnedBy,
			&i.IsAvailable,
			&i.OpensAt,
			&i.ClosesAt,
			&i.RentalDays,
			&i.BookingPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVenue = `-- name: UpdateVenue :exec
UPDATE venues
  set name = $2,
  image_links = $3::varchar[],
  type = $4,
  description = $5,
  location = $6,
  dimension = $7,
  capacity = $8,
  facilities = $9::varchar[],
  has_accomodation = $10,
  room_type = $11,
  no_of_rooms = $12,
  sleeps = $13,
  bed_type = $14,
  rent = $15,
  owned_by = $16,
  is_available = $17,
  opens_at = $18,
  closes_at = $19,
  rental_days = $20,
  booking_price = $21
WHERE id = $1
`

type UpdateVenueParams struct {
	ID              uuid.UUID      `json:"id"`
	Name            string         `json:"name"`
	Column3         []string       `json:"column_3"`
	Type            sql.NullString `json:"type"`
	Description     sql.NullString `json:"description"`
	Location        string         `json:"location"`
	Dimension       sql.NullString `json:"dimension"`
	Capacity        sql.NullInt32  `json:"capacity"`
	Column9         []string       `json:"column_9"`
	HasAccomodation sql.NullBool   `json:"has_accomodation"`
	RoomType        sql.NullString `json:"room_type"`
	NoOfRooms       sql.NullInt32  `json:"no_of_rooms"`
	Sleeps          sql.NullString `json:"sleeps"`
	BedType         sql.NullString `json:"bed_type"`
	Rent            sql.NullInt32  `json:"rent"`
	OwnedBy         uuid.NullUUID  `json:"owned_by"`
	IsAvailable     sql.NullBool   `json:"is_available"`
	OpensAt         sql.NullTime   `json:"opens_at"`
	ClosesAt        sql.NullTime   `json:"closes_at"`
	RentalDays      sql.NullString `json:"rental_days"`
	BookingPrice    sql.NullInt32  `json:"booking_price"`
}

func (q *Queries) UpdateVenue(ctx context.Context, arg UpdateVenueParams) error {
	_, err := q.db.ExecContext(ctx, updateVenue,
		arg.ID,
		arg.Name,
		pq.Array(arg.Column3),
		arg.Type,
		arg.Description,
		arg.Location,
		arg.Dimension,
		arg.Capacity,
		pq.Array(arg.Column9),
		arg.HasAccomodation,
		arg.RoomType,
		arg.NoOfRooms,
		arg.Sleeps,
		arg.BedType,
		arg.Rent,
		arg.OwnedBy,
		arg.IsAvailable,
		arg.OpensAt,
		arg.ClosesAt,
		arg.RentalDays,
		arg.BookingPrice,
	)
	return err
}
