// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookedPractitioners.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBookedPractitioner = `-- name: CreateBookedPractitioner :one
INSERT INTO "bookedPractitioners" (
  type,
  service_id,
  booked_for,
  booked_by
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, type, service_id, booked_for, booked_by, created_at
`

type CreateBookedPractitionerParams struct {
	Type      sql.NullString `json:"type"`
	ServiceID uuid.NullUUID  `json:"service_id"`
	BookedFor sql.NullTime   `json:"booked_for"`
	BookedBy  uuid.NullUUID  `json:"booked_by"`
}

func (q *Queries) CreateBookedPractitioner(ctx context.Context, arg CreateBookedPractitionerParams) (BookedPractitioners, error) {
	row := q.db.QueryRowContext(ctx, createBookedPractitioner,
		arg.Type,
		arg.ServiceID,
		arg.BookedFor,
		arg.BookedBy,
	)
	var i BookedPractitioners
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.ServiceID,
		&i.BookedFor,
		&i.BookedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookedPractitioner = `-- name: DeleteBookedPractitioner :exec
DELETE FROM "bookedPractitioners"
WHERE id = $1
`

func (q *Queries) DeleteBookedPractitioner(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBookedPractitioner, id)
	return err
}

const getBookedPractitioner = `-- name: GetBookedPractitioner :one
SELECT id, type, service_id, booked_for, booked_by, created_at FROM "bookedPractitioners"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookedPractitioner(ctx context.Context, id uuid.UUID) (BookedPractitioners, error) {
	row := q.db.QueryRowContext(ctx, getBookedPractitioner, id)
	var i BookedPractitioners
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.ServiceID,
		&i.BookedFor,
		&i.BookedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listBookedPractitionersByService = `-- name: ListBookedPractitionersByService :many
SELECT id, type, service_id, booked_for, booked_by, created_at FROM "bookedPractitioners"
WHERE service_id = $1
ORDER BY booked_for
`

func (q *Queries) ListBookedPractitionersByService(ctx context.Context, serviceID uuid.NullUUID) ([]BookedPractitioners, error) {
	rows, err := q.db.QueryContext(ctx, listBookedPractitionersByService, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookedPractitioners
	for rows.Next() {
		var i BookedPractitioners
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.ServiceID,
			&i.BookedFor,
			&i.BookedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookedPractitionersByUser = `-- name: ListBookedPractitionersByUser :many
SELECT id, type, service_id, booked_for, booked_by, created_at FROM "bookedPractitioners"
WHERE booked_by = $1
ORDER BY booked_for
`

func (q *Queries) ListBookedPractitionersByUser(ctx context.Context, bookedBy uuid.NullUUID) ([]BookedPractitioners, error) {
	rows, err := q.db.QueryContext(ctx, listBookedPractitionersByUser, bookedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookedPractitioners
	for rows.Next() {
		var i BookedPractitioners
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.ServiceID,
			&i.BookedFor,
			&i.BookedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookedPractitioner = `-- name: UpdateBookedPractitioner :one
UPDATE "bookedPractitioners"
  set type = $2,
  service_id = $3,
  booked_for = $4,
  booked_by = $5
WHERE id = $1
RETURNING id, type, service_id, booked_for, booked_by, created_at
`

type UpdateBookedPractitionerParams struct {
	ID        uuid.UUID      `json:"id"`
	Type      sql.NullString `json:"type"`
	ServiceID uuid.NullUUID  `json:"service_id"`
	BookedFor sql.NullTime   `json:"booked_for"`
	BookedBy  uuid.NullUUID  `json:"booked_by"`
}

func (q *Queries) UpdateBookedPractitioner(ctx context.Context, arg UpdateBookedPractitionerParams) (BookedPractitioners, error) {
	row := q.db.QueryRowContext(ctx, updateBookedPractitioner,
		arg.ID,
		arg.Type,
		arg.ServiceID,
		arg.BookedFor,
		arg.BookedBy,
	)
	var i BookedPractitioners
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.ServiceID,
		&i.BookedFor,
		&i.BookedBy,
		&i.CreatedAt,
	)
	return i, err
}
