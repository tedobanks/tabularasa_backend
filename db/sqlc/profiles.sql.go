// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one

INSERT INTO "profiles" (
  id,
  bio,
  phone_no,
  country,
  address,
  experience,
  field,
  business_name,
  roles
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, bio, phone_no, country, address, experience, field, business_name, roles, created_at
`

type CreateProfileParams struct {
	ID           uuid.UUID      `json:"id"`
	Bio          sql.NullString `json:"bio"`
	PhoneNo      sql.NullString `json:"phone_no"`
	Country      sql.NullString `json:"country"`
	Address      sql.NullString `json:"address"`
	Experience   sql.NullInt32  `json:"experience"`
	Field        sql.NullString `json:"field"`
	BusinessName sql.NullString `json:"business_name"`
	Roles        string         `json:"roles"`
}

// Or any other relevant field for ordering
func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.ID,
		arg.Bio,
		arg.PhoneNo,
		arg.Country,
		arg.Address,
		arg.Experience,
		arg.Field,
		arg.BusinessName,
		arg.Roles,
	)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.Bio,
		&i.PhoneNo,
		&i.Country,
		&i.Address,
		&i.Experience,
		&i.Field,
		&i.BusinessName,
		&i.Roles,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT id, bio, phone_no, country, address, experience, field, business_name, roles, created_at FROM profiles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.Bio,
		&i.PhoneNo,
		&i.Country,
		&i.Address,
		&i.Experience,
		&i.Field,
		&i.BusinessName,
		&i.Roles,
		&i.CreatedAt,
	)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, bio, phone_no, country, address, experience, field, business_name, roles, created_at FROM profiles
ORDER BY business_name
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profiles, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profiles
	for rows.Next() {
		var i Profiles
		if err := rows.Scan(
			&i.ID,
			&i.Bio,
			&i.PhoneNo,
			&i.Country,
			&i.Address,
			&i.Experience,
			&i.Field,
			&i.BusinessName,
			&i.Roles,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
  set bio = $2,
  phone_no = $3,
  country = $4,
  address = $5,
  experience = $6,
  field = $7,
  business_name = $8,
  roles = $9
WHERE id = $1
RETURNING id, bio, phone_no, country, address, experience, field, business_name, roles, created_at
`

type UpdateProfileParams struct {
	ID           uuid.UUID      `json:"id"`
	Bio          sql.NullString `json:"bio"`
	PhoneNo      sql.NullString `json:"phone_no"`
	Country      sql.NullString `json:"country"`
	Address      sql.NullString `json:"address"`
	Experience   sql.NullInt32  `json:"experience"`
	Field        sql.NullString `json:"field"`
	BusinessName sql.NullString `json:"business_name"`
	Roles        string         `json:"roles"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.ID,
		arg.Bio,
		arg.PhoneNo,
		arg.Country,
		arg.Address,
		arg.Experience,
		arg.Field,
		arg.BusinessName,
		arg.Roles,
	)
	var i Profiles
	err := row.Scan(
		&i.ID,
		&i.Bio,
		&i.PhoneNo,
		&i.Country,
		&i.Address,
		&i.Experience,
		&i.Field,
		&i.BusinessName,
		&i.Roles,
		&i.CreatedAt,
	)
	return i, err
}
