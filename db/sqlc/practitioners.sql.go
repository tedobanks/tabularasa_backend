// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: practitioners.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPractitioner = `-- name: CreatePractitioner :one
INSERT INTO "practitioners" (
  name,
  description,
  image_link,
  is_available,
  created_by,
  opens_at,
  closes_at,
  working_days
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, name, description, image_link, is_available, created_by, opens_at, closes_at, working_days, created_at
`

type CreatePractitionerParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	ImageLink   sql.NullString `json:"image_link"`
	IsAvailable sql.NullBool   `json:"is_available"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
	OpensAt     sql.NullTime   `json:"opens_at"`
	ClosesAt    sql.NullTime   `json:"closes_at"`
	WorkingDays sql.NullString `json:"working_days"`
}

func (q *Queries) CreatePractitioner(ctx context.Context, arg CreatePractitionerParams) (Practitioners, error) {
	row := q.db.QueryRowContext(ctx, createPractitioner,
		arg.Name,
		arg.Description,
		arg.ImageLink,
		arg.IsAvailable,
		arg.CreatedBy,
		arg.OpensAt,
		arg.ClosesAt,
		arg.WorkingDays,
	)
	var i Practitioners
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageLink,
		&i.IsAvailable,
		&i.CreatedBy,
		&i.OpensAt,
		&i.ClosesAt,
		&i.WorkingDays,
		&i.CreatedAt,
	)
	return i, err
}

const deletePractitioner = `-- name: DeletePractitioner :exec
DELETE FROM practitioners
WHERE id = $1
`

func (q *Queries) DeletePractitioner(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePractitioner, id)
	return err
}

const getPractitioner = `-- name: GetPractitioner :one
SELECT id, name, description, image_link, is_available, created_by, opens_at, closes_at, working_days, created_at FROM practitioners
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPractitioner(ctx context.Context, id uuid.UUID) (Practitioners, error) {
	row := q.db.QueryRowContext(ctx, getPractitioner, id)
	var i Practitioners
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageLink,
		&i.IsAvailable,
		&i.CreatedBy,
		&i.OpensAt,
		&i.ClosesAt,
		&i.WorkingDays,
		&i.CreatedAt,
	)
	return i, err
}

const listPractitioners = `-- name: ListPractitioners :many
SELECT id, name, description, image_link, is_available, created_by, opens_at, closes_at, working_days, created_at FROM practitioners
ORDER BY name
`

func (q *Queries) ListPractitioners(ctx context.Context) ([]Practitioners, error) {
	rows, err := q.db.QueryContext(ctx, listPractitioners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Practitioners
	for rows.Next() {
		var i Practitioners
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageLink,
			&i.IsAvailable,
			&i.CreatedBy,
			&i.OpensAt,
			&i.ClosesAt,
			&i.WorkingDays,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePractitioner = `-- name: UpdatePractitioner :one
UPDATE practitioners
  set name = $2,
  description = $3,
  image_link = $4,
  is_available = $5,
  created_by = $6,
  opens_at = $7,
  closes_at = $8,
  working_days = $9
WHERE id = $1
RETURNING id, name, description, image_link, is_available, created_by, opens_at, closes_at, working_days, created_at
`

type UpdatePractitionerParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	ImageLink   sql.NullString `json:"image_link"`
	IsAvailable sql.NullBool   `json:"is_available"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
	OpensAt     sql.NullTime   `json:"opens_at"`
	ClosesAt    sql.NullTime   `json:"closes_at"`
	WorkingDays sql.NullString `json:"working_days"`
}

func (q *Queries) UpdatePractitioner(ctx context.Context, arg UpdatePractitionerParams) (Practitioners, error) {
	row := q.db.QueryRowContext(ctx, updatePractitioner,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageLink,
		arg.IsAvailable,
		arg.CreatedBy,
		arg.OpensAt,
		arg.ClosesAt,
		arg.WorkingDays,
	)
	var i Practitioners
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageLink,
		&i.IsAvailable,
		&i.CreatedBy,
		&i.OpensAt,
		&i.ClosesAt,
		&i.WorkingDays,
		&i.CreatedAt,
	)
	return i, err
}
